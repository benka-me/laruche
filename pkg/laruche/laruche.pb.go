// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core.proto

package laruche

import (
	fmt "fmt"
	user "github.com/benka-me/cell-user/go-pkg/user"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DevLang int32

const (
	go_         DevLang = 0
	javascript_ DevLang = 1
	python_     DevLang = 2
	java_       DevLang = 3
	cpp_        DevLang = 4
	csharp_     DevLang = 5
	objectivec_ DevLang = 6
	ruby_       DevLang = 7
	dart_       DevLang = 8
	php_        DevLang = 9
)

var DevLang_name = map[int32]string{
	0: "go_",
	1: "javascript_",
	2: "python_",
	3: "java_",
	4: "cpp_",
	5: "csharp_",
	6: "objectivec_",
	7: "ruby_",
	8: "dart_",
	9: "php_",
}

var DevLang_value = map[string]int32{
	"go_":         0,
	"javascript_": 1,
	"python_":     2,
	"java_":       3,
	"cpp_":        4,
	"csharp_":     5,
	"objectivec_": 6,
	"ruby_":       7,
	"dart_":       8,
	"php_":        9,
}

func (DevLang) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{0}
}

type Bee struct {
	Name         string      `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	PkgName      string      `protobuf:"bytes,2,opt,name=PkgName,proto3" json:"PkgName,omitempty"`
	PkgNameCamel string      `protobuf:"bytes,3,opt,name=PkgNameCamel,proto3" json:"PkgNameCamel,omitempty"`
	Repo         string      `protobuf:"bytes,4,opt,name=Repo,proto3" json:"Repo,omitempty"`
	Author       string      `protobuf:"bytes,5,opt,name=Author,proto3" json:"Author,omitempty"`
	Port         int32       `protobuf:"varint,7,opt,name=Port,proto3" json:"Port,omitempty"`
	Public       bool        `protobuf:"varint,8,opt,name=Public,proto3" json:"Public,omitempty"`
	License      string      `protobuf:"bytes,9,opt,name=License,proto3" json:"License,omitempty"`
	Description  string      `protobuf:"bytes,10,opt,name=Description,proto3" json:"Description,omitempty"`
	Keywords     string      `protobuf:"bytes,11,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	Tag          string      `protobuf:"bytes,12,opt,name=Tag,proto3" json:"Tag,omitempty"`
	DevLang      DevLang     `protobuf:"varint,13,opt,name=DevLang,proto3,enum=core.DevLang" json:"DevLang,omitempty"`
	Languages    *Languages  `protobuf:"bytes,14,opt,name=Languages,proto3" json:"Languages,omitempty"`
	ProtoSetup   *ProtoSetup `protobuf:"bytes,15,opt,name=ProtoSetup,proto3" json:"ProtoSetup,omitempty"`
	IsGateway    bool        `protobuf:"varint,16,opt,name=IsGateway,proto3" json:"IsGateway,omitempty"`
	Deps         []string    `protobuf:"bytes,17,rep,name=Deps,proto3" json:"Deps,omitempty"`
	Cons         []string    `protobuf:"bytes,18,rep,name=Cons,proto3" json:"Cons,omitempty"`
}

func (bee *Bee) Reset()    { *bee = Bee{} }
func (*Bee) ProtoMessage() {}
func (*Bee) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{0}
}
func (bee *Bee) XXX_Unmarshal(b []byte) error {
	return bee.Unmarshal(b)
}
func (bee *Bee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bee.Marshal(b, bee, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := bee.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (bee *Bee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bee.Merge(bee, src)
}
func (bee *Bee) XXX_Size() int {
	return bee.Size()
}
func (bee *Bee) XXX_DiscardUnknown() {
	xxx_messageInfo_Bee.DiscardUnknown(bee)
}

var xxx_messageInfo_Bee proto.InternalMessageInfo

func (bee *Bee) GetName() string {
	if bee != nil {
		return bee.Name
	}
	return ""
}

func (bee *Bee) GetPkgName() string {
	if bee != nil {
		return bee.PkgName
	}
	return ""
}

func (bee *Bee) GetPkgNameCamel() string {
	if bee != nil {
		return bee.PkgNameCamel
	}
	return ""
}

func (bee *Bee) GetRepo() string {
	if bee != nil {
		return bee.Repo
	}
	return ""
}

func (bee *Bee) GetAuthor() string {
	if bee != nil {
		return bee.Author
	}
	return ""
}

func (bee *Bee) GetPort() int32 {
	if bee != nil {
		return bee.Port
	}
	return 0
}

func (bee *Bee) GetPublic() bool {
	if bee != nil {
		return bee.Public
	}
	return false
}

func (bee *Bee) GetLicense() string {
	if bee != nil {
		return bee.License
	}
	return ""
}

func (bee *Bee) GetDescription() string {
	if bee != nil {
		return bee.Description
	}
	return ""
}

func (bee *Bee) GetKeywords() string {
	if bee != nil {
		return bee.Keywords
	}
	return ""
}

func (bee *Bee) GetTag() string {
	if bee != nil {
		return bee.Tag
	}
	return ""
}

func (bee *Bee) GetDevLang() DevLang {
	if bee != nil {
		return bee.DevLang
	}
	return go_
}

func (bee *Bee) GetLanguages() *Languages {
	if bee != nil {
		return bee.Languages
	}
	return nil
}

func (bee *Bee) GetProtoSetup() *ProtoSetup {
	if bee != nil {
		return bee.ProtoSetup
	}
	return nil
}

func (bee *Bee) GetIsGateway() bool {
	if bee != nil {
		return bee.IsGateway
	}
	return false
}

func (bee *Bee) GetDeps() []string {
	if bee != nil {
		return bee.Deps
	}
	return nil
}

func (bee *Bee) GetCons() []string {
	if bee != nil {
		return bee.Cons
	}
	return nil
}

type Bees struct {
	Bees          []*Bee `protobuf:"bytes,1,rep,name=Bees,proto3" json:"Bees,omitempty"`
	StatusMessage string `protobuf:"bytes,2,opt,name=StatusMessage,proto3" json:"StatusMessage,omitempty"`
}

func (m *Bees) Reset()      { *m = Bees{} }
func (*Bees) ProtoMessage() {}
func (*Bees) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{1}
}
func (m *Bees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bees.Merge(m, src)
}
func (m *Bees) XXX_Size() int {
	return m.Size()
}
func (m *Bees) XXX_DiscardUnknown() {
	xxx_messageInfo_Bees.DiscardUnknown(m)
}

var xxx_messageInfo_Bees proto.InternalMessageInfo

func (m *Bees) GetBees() []*Bee {
	if m != nil {
		return m.Bees
	}
	return nil
}

func (m *Bees) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

type BeeReq struct {
	Token   *user.Token `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	BeeName string      `protobuf:"bytes,2,opt,name=BeeName,proto3" json:"BeeName,omitempty"`
}

func (m *BeeReq) Reset()      { *m = BeeReq{} }
func (*BeeReq) ProtoMessage() {}
func (*BeeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{2}
}
func (m *BeeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeeReq.Merge(m, src)
}
func (m *BeeReq) XXX_Size() int {
	return m.Size()
}
func (m *BeeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BeeReq.DiscardUnknown(m)
}

var xxx_messageInfo_BeeReq proto.InternalMessageInfo

func (m *BeeReq) GetToken() *user.Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *BeeReq) GetBeeName() string {
	if m != nil {
		return m.BeeName
	}
	return ""
}

type BeesReq struct {
	Token    *user.Token `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	BeeNames []string    `protobuf:"bytes,2,rep,name=BeeNames,proto3" json:"BeeNames,omitempty"`
}

func (m *BeesReq) Reset()      { *m = BeesReq{} }
func (*BeesReq) ProtoMessage() {}
func (*BeesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{3}
}
func (m *BeesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeesReq.Merge(m, src)
}
func (m *BeesReq) XXX_Size() int {
	return m.Size()
}
func (m *BeesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BeesReq.DiscardUnknown(m)
}

var xxx_messageInfo_BeesReq proto.InternalMessageInfo

func (m *BeesReq) GetToken() *user.Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *BeesReq) GetBeeNames() []string {
	if m != nil {
		return m.BeeNames
	}
	return nil
}

type Dep struct {
	Port         int32  `protobuf:"varint,1,opt,name=Port,proto3" json:"Port,omitempty"`
	Dev          string `protobuf:"bytes,2,opt,name=Dev,proto3" json:"Dev,omitempty"`
	Prod         string `protobuf:"bytes,3,opt,name=Prod,proto3" json:"Prod,omitempty"`
	PkgName      string `protobuf:"bytes,4,opt,name=PkgName,proto3" json:"PkgName,omitempty"`
	PkgNameCamel string `protobuf:"bytes,5,opt,name=PkgNameCamel,proto3" json:"PkgNameCamel,omitempty"`
}

func (m *Dep) Reset()      { *m = Dep{} }
func (*Dep) ProtoMessage() {}
func (*Dep) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{4}
}
func (m *Dep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dep.Merge(m, src)
}
func (m *Dep) XXX_Size() int {
	return m.Size()
}
func (m *Dep) XXX_DiscardUnknown() {
	xxx_messageInfo_Dep.DiscardUnknown(m)
}

var xxx_messageInfo_Dep proto.InternalMessageInfo

func (m *Dep) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Dep) GetDev() string {
	if m != nil {
		return m.Dev
	}
	return ""
}

func (m *Dep) GetProd() string {
	if m != nil {
		return m.Prod
	}
	return ""
}

func (m *Dep) GetPkgName() string {
	if m != nil {
		return m.PkgName
	}
	return ""
}

func (m *Dep) GetPkgNameCamel() string {
	if m != nil {
		return m.PkgNameCamel
	}
	return ""
}

type Hive struct {
	Name         string          `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	PkgName      string          `protobuf:"bytes,2,opt,name=PkgName,proto3" json:"PkgName,omitempty"`
	PkgNameCamel string          `protobuf:"bytes,3,opt,name=PkgNameCamel,proto3" json:"PkgNameCamel,omitempty"`
	Repo         string          `protobuf:"bytes,4,opt,name=Repo,proto3" json:"Repo,omitempty"`
	Author       string          `protobuf:"bytes,5,opt,name=Author,proto3" json:"Author,omitempty"`
	Public       bool            `protobuf:"varint,8,opt,name=Public,proto3" json:"Public,omitempty"`
	Deps         map[string]*Dep `protobuf:"bytes,9,rep,name=Deps,proto3" json:"Deps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (hive *Hive) Reset()   { *hive = Hive{} }
func (*Hive) ProtoMessage() {}
func (*Hive) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{5}
}
func (hive *Hive) XXX_Unmarshal(b []byte) error {
	return hive.Unmarshal(b)
}
func (hive *Hive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hive.Marshal(b, hive, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := hive.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (hive *Hive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hive.Merge(hive, src)
}
func (hive *Hive) XXX_Size() int {
	return hive.Size()
}
func (hive *Hive) XXX_DiscardUnknown() {
	xxx_messageInfo_Hive.DiscardUnknown(hive)
}

var xxx_messageInfo_Hive proto.InternalMessageInfo

func (hive *Hive) GetName() string {
	if hive != nil {
		return hive.Name
	}
	return ""
}

func (hive *Hive) GetPkgName() string {
	if hive != nil {
		return hive.PkgName
	}
	return ""
}

func (hive *Hive) GetPkgNameCamel() string {
	if hive != nil {
		return hive.PkgNameCamel
	}
	return ""
}

func (hive *Hive) GetRepo() string {
	if hive != nil {
		return hive.Repo
	}
	return ""
}

func (hive *Hive) GetAuthor() string {
	if hive != nil {
		return hive.Author
	}
	return ""
}

func (hive *Hive) GetPublic() bool {
	if hive != nil {
		return hive.Public
	}
	return false
}

func (hive *Hive) GetDeps() map[string]*Dep {
	if hive != nil {
		return hive.Deps
	}
	return nil
}

type Languages struct {
	Go         *Go         `protobuf:"bytes,1,opt,name=Go,proto3" json:"Go,omitempty"`
	Javascript *Javascript `protobuf:"bytes,2,opt,name=Javascript,proto3" json:"Javascript,omitempty"`
}

func (m *Languages) Reset()      { *m = Languages{} }
func (*Languages) ProtoMessage() {}
func (*Languages) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{6}
}
func (m *Languages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Languages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Languages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Languages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Languages.Merge(m, src)
}
func (m *Languages) XXX_Size() int {
	return m.Size()
}
func (m *Languages) XXX_DiscardUnknown() {
	xxx_messageInfo_Languages.DiscardUnknown(m)
}

var xxx_messageInfo_Languages proto.InternalMessageInfo

func (m *Languages) GetGo() *Go {
	if m != nil {
		return m.Go
	}
	return nil
}

func (m *Languages) GetJavascript() *Javascript {
	if m != nil {
		return m.Javascript
	}
	return nil
}

type ProtoSetup struct {
	Files []string `protobuf:"bytes,3,rep,name=Files,proto3" json:"Files,omitempty"`
}

func (m *ProtoSetup) Reset()      { *m = ProtoSetup{} }
func (*ProtoSetup) ProtoMessage() {}
func (*ProtoSetup) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{7}
}
func (m *ProtoSetup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoSetup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtoSetup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtoSetup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoSetup.Merge(m, src)
}
func (m *ProtoSetup) XXX_Size() int {
	return m.Size()
}
func (m *ProtoSetup) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoSetup.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoSetup proto.InternalMessageInfo

func (m *ProtoSetup) GetFiles() []string {
	if m != nil {
		return m.Files
	}
	return nil
}

type LanguageSetup struct {
	Active       bool   `protobuf:"varint,1,opt,name=Active,proto3" json:"Active,omitempty"`
	ProtocBinary string `protobuf:"bytes,3,opt,name=ProtocBinary,proto3" json:"ProtocBinary,omitempty"`
}

func (m *LanguageSetup) Reset()      { *m = LanguageSetup{} }
func (*LanguageSetup) ProtoMessage() {}
func (*LanguageSetup) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{8}
}
func (m *LanguageSetup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LanguageSetup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LanguageSetup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LanguageSetup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LanguageSetup.Merge(m, src)
}
func (m *LanguageSetup) XXX_Size() int {
	return m.Size()
}
func (m *LanguageSetup) XXX_DiscardUnknown() {
	xxx_messageInfo_LanguageSetup.DiscardUnknown(m)
}

var xxx_messageInfo_LanguageSetup proto.InternalMessageInfo

func (m *LanguageSetup) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *LanguageSetup) GetProtocBinary() string {
	if m != nil {
		return m.ProtocBinary
	}
	return ""
}

type Go struct {
	Setup *LanguageSetup `protobuf:"bytes,1,opt,name=Setup,proto3" json:"Setup,omitempty"`
}

func (m *Go) Reset()      { *m = Go{} }
func (*Go) ProtoMessage() {}
func (*Go) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{9}
}
func (m *Go) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Go) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Go.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Go) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Go.Merge(m, src)
}
func (m *Go) XXX_Size() int {
	return m.Size()
}
func (m *Go) XXX_DiscardUnknown() {
	xxx_messageInfo_Go.DiscardUnknown(m)
}

var xxx_messageInfo_Go proto.InternalMessageInfo

func (m *Go) GetSetup() *LanguageSetup {
	if m != nil {
		return m.Setup
	}
	return nil
}

type Javascript struct {
	Setup *LanguageSetup `protobuf:"bytes,1,opt,name=Setup,proto3" json:"Setup,omitempty"`
}

func (m *Javascript) Reset()      { *m = Javascript{} }
func (*Javascript) ProtoMessage() {}
func (*Javascript) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{10}
}
func (m *Javascript) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Javascript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Javascript.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Javascript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Javascript.Merge(m, src)
}
func (m *Javascript) XXX_Size() int {
	return m.Size()
}
func (m *Javascript) XXX_DiscardUnknown() {
	xxx_messageInfo_Javascript.DiscardUnknown(m)
}

var xxx_messageInfo_Javascript proto.InternalMessageInfo

func (m *Javascript) GetSetup() *LanguageSetup {
	if m != nil {
		return m.Setup
	}
	return nil
}

type Python struct {
	Setup *LanguageSetup `protobuf:"bytes,1,opt,name=Setup,proto3" json:"Setup,omitempty"`
}

func (m *Python) Reset()      { *m = Python{} }
func (*Python) ProtoMessage() {}
func (*Python) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{11}
}
func (m *Python) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Python) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Python.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Python) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Python.Merge(m, src)
}
func (m *Python) XXX_Size() int {
	return m.Size()
}
func (m *Python) XXX_DiscardUnknown() {
	xxx_messageInfo_Python.DiscardUnknown(m)
}

var xxx_messageInfo_Python proto.InternalMessageInfo

func (m *Python) GetSetup() *LanguageSetup {
	if m != nil {
		return m.Setup
	}
	return nil
}

type Java struct {
	Setup *LanguageSetup `protobuf:"bytes,1,opt,name=Setup,proto3" json:"Setup,omitempty"`
}

func (m *Java) Reset()      { *m = Java{} }
func (*Java) ProtoMessage() {}
func (*Java) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{12}
}
func (m *Java) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Java) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Java.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Java) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Java.Merge(m, src)
}
func (m *Java) XXX_Size() int {
	return m.Size()
}
func (m *Java) XXX_DiscardUnknown() {
	xxx_messageInfo_Java.DiscardUnknown(m)
}

var xxx_messageInfo_Java proto.InternalMessageInfo

func (m *Java) GetSetup() *LanguageSetup {
	if m != nil {
		return m.Setup
	}
	return nil
}

type CPP struct {
	Setup *LanguageSetup `protobuf:"bytes,1,opt,name=Setup,proto3" json:"Setup,omitempty"`
}

func (m *CPP) Reset()      { *m = CPP{} }
func (*CPP) ProtoMessage() {}
func (*CPP) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{13}
}
func (m *CPP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CPP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CPP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CPP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPP.Merge(m, src)
}
func (m *CPP) XXX_Size() int {
	return m.Size()
}
func (m *CPP) XXX_DiscardUnknown() {
	xxx_messageInfo_CPP.DiscardUnknown(m)
}

var xxx_messageInfo_CPP proto.InternalMessageInfo

func (m *CPP) GetSetup() *LanguageSetup {
	if m != nil {
		return m.Setup
	}
	return nil
}

type CSharp struct {
	Setup *LanguageSetup `protobuf:"bytes,1,opt,name=Setup,proto3" json:"Setup,omitempty"`
}

func (m *CSharp) Reset()      { *m = CSharp{} }
func (*CSharp) ProtoMessage() {}
func (*CSharp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{14}
}
func (m *CSharp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSharp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CSharp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CSharp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSharp.Merge(m, src)
}
func (m *CSharp) XXX_Size() int {
	return m.Size()
}
func (m *CSharp) XXX_DiscardUnknown() {
	xxx_messageInfo_CSharp.DiscardUnknown(m)
}

var xxx_messageInfo_CSharp proto.InternalMessageInfo

func (m *CSharp) GetSetup() *LanguageSetup {
	if m != nil {
		return m.Setup
	}
	return nil
}

type ObjectiveC struct {
	Setup *LanguageSetup `protobuf:"bytes,1,opt,name=Setup,proto3" json:"Setup,omitempty"`
}

func (m *ObjectiveC) Reset()      { *m = ObjectiveC{} }
func (*ObjectiveC) ProtoMessage() {}
func (*ObjectiveC) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{15}
}
func (m *ObjectiveC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectiveC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectiveC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectiveC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectiveC.Merge(m, src)
}
func (m *ObjectiveC) XXX_Size() int {
	return m.Size()
}
func (m *ObjectiveC) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectiveC.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectiveC proto.InternalMessageInfo

func (m *ObjectiveC) GetSetup() *LanguageSetup {
	if m != nil {
		return m.Setup
	}
	return nil
}

type Ruby struct {
	Setup *LanguageSetup `protobuf:"bytes,1,opt,name=Setup,proto3" json:"Setup,omitempty"`
}

func (m *Ruby) Reset()      { *m = Ruby{} }
func (*Ruby) ProtoMessage() {}
func (*Ruby) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{16}
}
func (m *Ruby) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ruby) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ruby.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ruby) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ruby.Merge(m, src)
}
func (m *Ruby) XXX_Size() int {
	return m.Size()
}
func (m *Ruby) XXX_DiscardUnknown() {
	xxx_messageInfo_Ruby.DiscardUnknown(m)
}

var xxx_messageInfo_Ruby proto.InternalMessageInfo

func (m *Ruby) GetSetup() *LanguageSetup {
	if m != nil {
		return m.Setup
	}
	return nil
}

type Dart struct {
	Setup *LanguageSetup `protobuf:"bytes,1,opt,name=Setup,proto3" json:"Setup,omitempty"`
}

func (m *Dart) Reset()      { *m = Dart{} }
func (*Dart) ProtoMessage() {}
func (*Dart) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{17}
}
func (m *Dart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dart.Merge(m, src)
}
func (m *Dart) XXX_Size() int {
	return m.Size()
}
func (m *Dart) XXX_DiscardUnknown() {
	xxx_messageInfo_Dart.DiscardUnknown(m)
}

var xxx_messageInfo_Dart proto.InternalMessageInfo

func (m *Dart) GetSetup() *LanguageSetup {
	if m != nil {
		return m.Setup
	}
	return nil
}

type PHP struct {
	Setup *LanguageSetup `protobuf:"bytes,1,opt,name=Setup,proto3" json:"Setup,omitempty"`
}

func (m *PHP) Reset()      { *m = PHP{} }
func (*PHP) ProtoMessage() {}
func (*PHP) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{18}
}
func (m *PHP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PHP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PHP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PHP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PHP.Merge(m, src)
}
func (m *PHP) XXX_Size() int {
	return m.Size()
}
func (m *PHP) XXX_DiscardUnknown() {
	xxx_messageInfo_PHP.DiscardUnknown(m)
}

var xxx_messageInfo_PHP proto.InternalMessageInfo

func (m *PHP) GetSetup() *LanguageSetup {
	if m != nil {
		return m.Setup
	}
	return nil
}

type PushBee struct {
	Bee   *Bee        `protobuf:"bytes,1,opt,name=Bee,proto3" json:"Bee,omitempty"`
	Token *user.Token `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (m *PushBee) Reset()      { *m = PushBee{} }
func (*PushBee) ProtoMessage() {}
func (*PushBee) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{19}
}
func (m *PushBee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushBee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushBee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushBee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushBee.Merge(m, src)
}
func (m *PushBee) XXX_Size() int {
	return m.Size()
}
func (m *PushBee) XXX_DiscardUnknown() {
	xxx_messageInfo_PushBee.DiscardUnknown(m)
}

var xxx_messageInfo_PushBee proto.InternalMessageInfo

func (m *PushBee) GetBee() *Bee {
	if m != nil {
		return m.Bee
	}
	return nil
}

func (m *PushBee) GetToken() *user.Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type PushHive struct {
	Hive  *Hive       `protobuf:"bytes,1,opt,name=Hive,proto3" json:"Hive,omitempty"`
	Token *user.Token `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (m *PushHive) Reset()      { *m = PushHive{} }
func (*PushHive) ProtoMessage() {}
func (*PushHive) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{20}
}
func (m *PushHive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushHive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushHive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushHive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushHive.Merge(m, src)
}
func (m *PushHive) XXX_Size() int {
	return m.Size()
}
func (m *PushHive) XXX_DiscardUnknown() {
	xxx_messageInfo_PushHive.DiscardUnknown(m)
}

var xxx_messageInfo_PushHive proto.InternalMessageInfo

func (m *PushHive) GetHive() *Hive {
	if m != nil {
		return m.Hive
	}
	return nil
}

func (m *PushHive) GetToken() *user.Token {
	if m != nil {
		return m.Token
	}
	return nil
}

type PushBeeRes struct {
	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *PushBeeRes) Reset()      { *m = PushBeeRes{} }
func (*PushBeeRes) ProtoMessage() {}
func (*PushBeeRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{21}
}
func (m *PushBeeRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushBeeRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushBeeRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushBeeRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushBeeRes.Merge(m, src)
}
func (m *PushBeeRes) XXX_Size() int {
	return m.Size()
}
func (m *PushBeeRes) XXX_DiscardUnknown() {
	xxx_messageInfo_PushBeeRes.DiscardUnknown(m)
}

var xxx_messageInfo_PushBeeRes proto.InternalMessageInfo

func (m *PushBeeRes) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PushHiveRes struct {
	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *PushHiveRes) Reset()      { *m = PushHiveRes{} }
func (*PushHiveRes) ProtoMessage() {}
func (*PushHiveRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7e43720d1edc0fe, []int{22}
}
func (m *PushHiveRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushHiveRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushHiveRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushHiveRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushHiveRes.Merge(m, src)
}
func (m *PushHiveRes) XXX_Size() int {
	return m.Size()
}
func (m *PushHiveRes) XXX_DiscardUnknown() {
	xxx_messageInfo_PushHiveRes.DiscardUnknown(m)
}

var xxx_messageInfo_PushHiveRes proto.InternalMessageInfo

func (m *PushHiveRes) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterEnum("core.DevLang", DevLang_name, DevLang_value)
	proto.RegisterType((*Bee)(nil), "core.Bee")
	proto.RegisterType((*Bees)(nil), "core.Bees")
	proto.RegisterType((*BeeReq)(nil), "core.BeeReq")
	proto.RegisterType((*BeesReq)(nil), "core.BeesReq")
	proto.RegisterType((*Dep)(nil), "core.Dep")
	proto.RegisterType((*Hive)(nil), "core.Hive")
	proto.RegisterMapType((map[string]*Dep)(nil), "core.Hive.DepsEntry")
	proto.RegisterType((*Languages)(nil), "core.Languages")
	proto.RegisterType((*ProtoSetup)(nil), "core.ProtoSetup")
	proto.RegisterType((*LanguageSetup)(nil), "core.LanguageSetup")
	proto.RegisterType((*Go)(nil), "core.Go")
	proto.RegisterType((*Javascript)(nil), "core.Javascript")
	proto.RegisterType((*Python)(nil), "core.Python")
	proto.RegisterType((*Java)(nil), "core.Java")
	proto.RegisterType((*CPP)(nil), "core.CPP")
	proto.RegisterType((*CSharp)(nil), "core.CSharp")
	proto.RegisterType((*ObjectiveC)(nil), "core.ObjectiveC")
	proto.RegisterType((*Ruby)(nil), "core.Ruby")
	proto.RegisterType((*Dart)(nil), "core.Dart")
	proto.RegisterType((*PHP)(nil), "core.PHP")
	proto.RegisterType((*PushBee)(nil), "core.PushBee")
	proto.RegisterType((*PushHive)(nil), "core.PushHive")
	proto.RegisterType((*PushBeeRes)(nil), "core.PushBeeRes")
	proto.RegisterType((*PushHiveRes)(nil), "core.PushHiveRes")
}

func init() { proto.RegisterFile("core.proto", fileDescriptor_f7e43720d1edc0fe) }

var fileDescriptor_f7e43720d1edc0fe = []byte{
	// 968 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0x8f, 0xed, 0x64, 0x93, 0xbc, 0x74, 0x77, 0xcd, 0x50, 0xa1, 0xd1, 0xd2, 0x9a, 0x60, 0x21,
	0x11, 0x90, 0xb2, 0xd9, 0x6e, 0x0f, 0x20, 0x6e, 0x24, 0x29, 0xbb, 0xcb, 0xb6, 0x10, 0x79, 0x2b,
	0x21, 0x71, 0xb1, 0x1c, 0x67, 0x9a, 0xb8, 0xc9, 0x66, 0x8c, 0xc7, 0x4e, 0x95, 0x03, 0x12, 0x12,
	0x37, 0x4e, 0x7c, 0x0c, 0x3e, 0x0a, 0xc7, 0x3d, 0xf6, 0xc8, 0x66, 0x2f, 0x70, 0xeb, 0x47, 0x40,
	0x6f, 0x66, 0xe2, 0x78, 0x45, 0x8b, 0x9a, 0x53, 0x4f, 0x7e, 0xef, 0xf7, 0xfe, 0xcc, 0xcc, 0x7b,
	0xbf, 0x37, 0x63, 0x80, 0x90, 0x27, 0xec, 0x30, 0x4e, 0x78, 0xca, 0x49, 0x19, 0xe5, 0x83, 0x07,
	0xe3, 0x28, 0x9d, 0x64, 0xc3, 0xc3, 0x90, 0x5f, 0x76, 0x86, 0x6c, 0x3e, 0x0d, 0xda, 0x97, 0xac,
	0x13, 0xb2, 0xd9, 0xac, 0x9d, 0x09, 0x96, 0x74, 0xa4, 0xeb, 0x30, 0x7b, 0xd6, 0x41, 0x4d, 0x05,
	0xba, 0xff, 0x58, 0x60, 0x75, 0x19, 0x23, 0x04, 0xca, 0xdf, 0x05, 0x97, 0x8c, 0x1a, 0x4d, 0xa3,
	0x55, 0xf7, 0xa4, 0x4c, 0x28, 0x54, 0x07, 0xd3, 0xb1, 0x84, 0x4d, 0x09, 0xaf, 0x55, 0xe2, 0xc2,
	0x1d, 0x2d, 0xf6, 0x82, 0x4b, 0x36, 0xa3, 0x96, 0x34, 0xdf, 0xc2, 0x30, 0xa3, 0xc7, 0x62, 0x4e,
	0xcb, 0x2a, 0x23, 0xca, 0xe4, 0x03, 0xd8, 0xf9, 0x3a, 0x4b, 0x27, 0x3c, 0xa1, 0x15, 0x89, 0x6a,
	0x0d, 0x7d, 0x07, 0x3c, 0x49, 0x69, 0xb5, 0x69, 0xb4, 0x2a, 0x9e, 0x94, 0xd1, 0x77, 0x90, 0x0d,
	0x67, 0x51, 0x48, 0x6b, 0x4d, 0xa3, 0x55, 0xf3, 0xb4, 0x86, 0xbb, 0x7a, 0x1c, 0x85, 0x6c, 0x2e,
	0x18, 0xad, 0xab, 0x5d, 0x69, 0x95, 0x34, 0xa1, 0xd1, 0x67, 0x22, 0x4c, 0xa2, 0x38, 0x8d, 0xf8,
	0x9c, 0x82, 0xb4, 0x16, 0x21, 0x72, 0x00, 0xb5, 0x73, 0xb6, 0x7c, 0xc1, 0x93, 0x91, 0xa0, 0x0d,
	0x69, 0xce, 0x75, 0x62, 0x83, 0xf5, 0x34, 0x18, 0xd3, 0x3b, 0x12, 0x46, 0x91, 0x7c, 0x0a, 0xd5,
	0x3e, 0x5b, 0x3c, 0x0e, 0xe6, 0x63, 0xba, 0xdb, 0x34, 0x5a, 0x7b, 0xc7, 0xbb, 0x87, 0xb2, 0xe4,
	0x1a, 0xf4, 0xd6, 0x56, 0xd2, 0x86, 0x3a, 0x7e, 0xb3, 0x60, 0xcc, 0x04, 0xdd, 0x6b, 0x1a, 0xad,
	0xc6, 0xf1, 0xbe, 0x72, 0xcd, 0x61, 0x6f, 0xe3, 0x41, 0x8e, 0x00, 0x06, 0x58, 0xfc, 0x0b, 0x96,
	0x66, 0x31, 0xdd, 0x97, 0xfe, 0xb6, 0xf2, 0xdf, 0xe0, 0x5e, 0xc1, 0x87, 0xdc, 0x83, 0xfa, 0x99,
	0x38, 0x09, 0x52, 0xf6, 0x22, 0x58, 0x52, 0x5b, 0x96, 0x63, 0x03, 0x60, 0xf5, 0xfa, 0x2c, 0x16,
	0xf4, 0xbd, 0xa6, 0x85, 0x95, 0x46, 0x19, 0xb1, 0x1e, 0x9f, 0x0b, 0x4a, 0x14, 0x86, 0xb2, 0x7b,
	0x0e, 0xe5, 0x2e, 0x63, 0x82, 0xdc, 0x57, 0x5f, 0x6a, 0x34, 0xad, 0x56, 0xe3, 0xb8, 0xae, 0x56,
	0xee, 0x32, 0xe6, 0x29, 0xf3, 0x27, 0xb0, 0x7b, 0x91, 0x06, 0x69, 0x26, 0x9e, 0x30, 0x21, 0x82,
	0xf1, 0xba, 0xf9, 0xb7, 0x41, 0xf7, 0x11, 0xec, 0x60, 0x08, 0xfb, 0x89, 0x7c, 0x0c, 0x95, 0xa7,
	0x7c, 0xca, 0xe6, 0x92, 0x3b, 0x8d, 0xe3, 0xc6, 0xa1, 0xa4, 0x97, 0x84, 0x3c, 0x65, 0xc1, 0x9e,
	0x75, 0x19, 0x2b, 0x32, 0x49, 0xab, 0xee, 0xa9, 0xb4, 0x88, 0xb7, 0xcc, 0x73, 0x00, 0x35, 0x1d,
	0x28, 0xa8, 0x29, 0x4f, 0x96, 0xeb, 0xee, 0xcf, 0x60, 0xf5, 0x59, 0x9c, 0x53, 0xc9, 0x28, 0x50,
	0xc9, 0x46, 0xd3, 0x42, 0x2f, 0x8d, 0xa2, 0xf4, 0x4a, 0xf8, 0x48, 0x13, 0x57, 0xca, 0x45, 0xba,
	0x97, 0xff, 0x9f, 0xee, 0x95, 0xff, 0xd2, 0xdd, 0xfd, 0xcd, 0x84, 0xf2, 0x69, 0xb4, 0x78, 0xd7,
	0x93, 0xf4, 0xa6, 0xa9, 0x69, 0x69, 0x8e, 0xd4, 0x65, 0xcf, 0xef, 0xaa, 0x9e, 0xe3, 0x7e, 0x0f,
	0x11, 0x7e, 0x34, 0x4f, 0x93, 0xa5, 0x62, 0xce, 0x41, 0x17, 0xea, 0x39, 0x84, 0x95, 0x9b, 0xb2,
	0xa5, 0x3e, 0x0b, 0x8a, 0xe4, 0x23, 0xa8, 0x2c, 0x82, 0x59, 0xa6, 0x0e, 0x92, 0xb3, 0xa7, 0xcf,
	0x62, 0x4f, 0xe1, 0x5f, 0x99, 0x5f, 0x1a, 0xee, 0x0f, 0x85, 0x81, 0x20, 0x14, 0xcc, 0x13, 0xae,
	0x9b, 0x5a, 0x53, 0xee, 0x27, 0xdc, 0x33, 0x4f, 0x38, 0x0e, 0xc2, 0xb7, 0xc1, 0x22, 0x50, 0xf3,
	0xa9, 0x13, 0xea, 0x41, 0xd8, 0xe0, 0x5e, 0xc1, 0xc7, 0x75, 0x8b, 0xa3, 0x43, 0xee, 0x42, 0xe5,
	0x9b, 0x68, 0xc6, 0x04, 0xb5, 0x24, 0x17, 0x94, 0xe2, 0x9e, 0xc3, 0xee, 0x7a, 0x71, 0xe5, 0x86,
	0xb5, 0x0a, 0xd3, 0x68, 0xa1, 0x7a, 0x52, 0xf3, 0xb4, 0x26, 0x6b, 0x8f, 0xc9, 0xc2, 0x6e, 0x34,
	0x0f, 0x92, 0x65, 0x5e, 0xfb, 0x02, 0xe6, 0x76, 0x70, 0xf3, 0xe4, 0x33, 0xa8, 0xa8, 0x61, 0x55,
	0xa7, 0x78, 0xff, 0xf6, 0x70, 0xab, 0x79, 0x55, 0x1e, 0xee, 0x17, 0xc5, 0x33, 0x6d, 0x13, 0xf8,
	0x10, 0x76, 0x06, 0xcb, 0x74, 0xc2, 0xe7, 0xdb, 0x04, 0x3d, 0x80, 0x32, 0xae, 0xb6, 0x4d, 0xc8,
	0x11, 0x58, 0xbd, 0xc1, 0x60, 0xcb, 0x9d, 0xf5, 0x2e, 0x26, 0x41, 0x12, 0x6f, 0x59, 0x87, 0xef,
	0x87, 0xcf, 0x99, 0xac, 0x74, 0x6f, 0xcb, 0x23, 0x79, 0xd9, 0x70, 0xb9, 0x65, 0x48, 0x3f, 0x48,
	0xd2, 0x2d, 0xab, 0x30, 0x38, 0xdd, 0xaa, 0x0a, 0x67, 0x50, 0x1d, 0x64, 0x62, 0x82, 0x8f, 0xe5,
	0x87, 0xf2, 0xcd, 0xd4, 0x31, 0x85, 0xfb, 0x53, 0xbe, 0xa4, 0xf9, 0x35, 0x66, 0xbe, 0xe9, 0x1a,
	0x73, 0x9f, 0x40, 0x0d, 0x53, 0xc9, 0xeb, 0xc2, 0x51, 0xd7, 0x86, 0x4e, 0x06, 0x9b, 0xc1, 0xf4,
	0xd4, 0x75, 0xf2, 0x16, 0xe9, 0xee, 0x01, 0xe8, 0x9d, 0x79, 0x4c, 0x90, 0x3d, 0x30, 0xcf, 0x46,
	0x7a, 0x62, 0xcd, 0xb3, 0x91, 0x7b, 0x1f, 0x1a, 0xeb, 0xc5, 0x5e, 0x63, 0xfe, 0xfc, 0x57, 0x23,
	0x7f, 0xe5, 0x48, 0x15, 0xac, 0x31, 0xf7, 0xed, 0x12, 0xd9, 0x87, 0xc6, 0xf3, 0x9c, 0xc4, 0xbe,
	0x6d, 0x90, 0x06, 0x54, 0x63, 0x49, 0x4e, 0xdf, 0x36, 0x49, 0x1d, 0x2a, 0x68, 0xf5, 0x6d, 0x8b,
	0xd4, 0xa0, 0x1c, 0xc6, 0xb1, 0x6f, 0x97, 0xd1, 0x23, 0x14, 0x48, 0x12, 0xdf, 0xae, 0x60, 0x3c,
	0x5f, 0x37, 0x3f, 0xf4, 0xed, 0x1d, 0x0c, 0x49, 0xb2, 0xe1, 0xd2, 0xb7, 0xab, 0x28, 0x8e, 0x82,
	0x24, 0xf5, 0xed, 0x1a, 0x46, 0xc7, 0x93, 0xd8, 0xb7, 0xeb, 0xdd, 0x67, 0x57, 0xd7, 0x4e, 0xe9,
	0xe5, 0xb5, 0x53, 0x7a, 0x75, 0xed, 0x18, 0xbf, 0xac, 0x1c, 0xe3, 0x8f, 0x95, 0x63, 0xfc, 0xb9,
	0x72, 0x8c, 0xab, 0x95, 0x63, 0xfc, 0xb5, 0x72, 0x8c, 0xbf, 0x57, 0x4e, 0xe9, 0xd5, 0xca, 0x31,
	0x7e, 0xbf, 0x71, 0x4a, 0x57, 0x37, 0x4e, 0xe9, 0xe5, 0x8d, 0x53, 0xfa, 0xf1, 0xe8, 0x75, 0xff,
	0x3b, 0x93, 0x68, 0xc1, 0xda, 0x82, 0x25, 0x0b, 0x96, 0xb4, 0xb1, 0x98, 0x9d, 0x31, 0x6f, 0xc7,
	0xd3, 0x71, 0x07, 0xe5, 0xe1, 0x8e, 0xfc, 0xeb, 0x79, 0xf8, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x17, 0x35, 0xc2, 0xdb, 0x3c, 0x09, 0x00, 0x00,
}

func (x DevLang) String() string {
	s, ok := DevLang_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (bee *Bee) Equal(that interface{}) bool {
	if that == nil {
		return bee == nil
	}

	that1, ok := that.(*Bee)
	if !ok {
		that2, ok := that.(Bee)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return bee == nil
	} else if bee == nil {
		return false
	}
	if bee.Name != that1.Name {
		return false
	}
	if bee.PkgName != that1.PkgName {
		return false
	}
	if bee.PkgNameCamel != that1.PkgNameCamel {
		return false
	}
	if bee.Repo != that1.Repo {
		return false
	}
	if bee.Author != that1.Author {
		return false
	}
	if bee.Port != that1.Port {
		return false
	}
	if bee.Public != that1.Public {
		return false
	}
	if bee.License != that1.License {
		return false
	}
	if bee.Description != that1.Description {
		return false
	}
	if bee.Keywords != that1.Keywords {
		return false
	}
	if bee.Tag != that1.Tag {
		return false
	}
	if bee.DevLang != that1.DevLang {
		return false
	}
	if !bee.Languages.Equal(that1.Languages) {
		return false
	}
	if !bee.ProtoSetup.Equal(that1.ProtoSetup) {
		return false
	}
	if bee.IsGateway != that1.IsGateway {
		return false
	}
	if len(bee.Deps) != len(that1.Deps) {
		return false
	}
	for i := range bee.Deps {
		if bee.Deps[i] != that1.Deps[i] {
			return false
		}
	}
	if len(bee.Cons) != len(that1.Cons) {
		return false
	}
	for i := range bee.Cons {
		if bee.Cons[i] != that1.Cons[i] {
			return false
		}
	}
	return true
}
func (this *Bees) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bees)
	if !ok {
		that2, ok := that.(Bees)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Bees) != len(that1.Bees) {
		return false
	}
	for i := range this.Bees {
		if !this.Bees[i].Equal(that1.Bees[i]) {
			return false
		}
	}
	if this.StatusMessage != that1.StatusMessage {
		return false
	}
	return true
}
func (this *BeeReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BeeReq)
	if !ok {
		that2, ok := that.(BeeReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Token.Equal(that1.Token) {
		return false
	}
	if this.BeeName != that1.BeeName {
		return false
	}
	return true
}
func (this *BeesReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BeesReq)
	if !ok {
		that2, ok := that.(BeesReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Token.Equal(that1.Token) {
		return false
	}
	if len(this.BeeNames) != len(that1.BeeNames) {
		return false
	}
	for i := range this.BeeNames {
		if this.BeeNames[i] != that1.BeeNames[i] {
			return false
		}
	}
	return true
}
func (this *Dep) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Dep)
	if !ok {
		that2, ok := that.(Dep)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Dev != that1.Dev {
		return false
	}
	if this.Prod != that1.Prod {
		return false
	}
	if this.PkgName != that1.PkgName {
		return false
	}
	if this.PkgNameCamel != that1.PkgNameCamel {
		return false
	}
	return true
}
func (hive *Hive) Equal(that interface{}) bool {
	if that == nil {
		return hive == nil
	}

	that1, ok := that.(*Hive)
	if !ok {
		that2, ok := that.(Hive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return hive == nil
	} else if hive == nil {
		return false
	}
	if hive.Name != that1.Name {
		return false
	}
	if hive.PkgName != that1.PkgName {
		return false
	}
	if hive.PkgNameCamel != that1.PkgNameCamel {
		return false
	}
	if hive.Repo != that1.Repo {
		return false
	}
	if hive.Author != that1.Author {
		return false
	}
	if hive.Public != that1.Public {
		return false
	}
	if len(hive.Deps) != len(that1.Deps) {
		return false
	}
	for i := range hive.Deps {
		if !hive.Deps[i].Equal(that1.Deps[i]) {
			return false
		}
	}
	return true
}
func (this *Languages) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Languages)
	if !ok {
		that2, ok := that.(Languages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Go.Equal(that1.Go) {
		return false
	}
	if !this.Javascript.Equal(that1.Javascript) {
		return false
	}
	return true
}
func (this *ProtoSetup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoSetup)
	if !ok {
		that2, ok := that.(ProtoSetup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Files) != len(that1.Files) {
		return false
	}
	for i := range this.Files {
		if this.Files[i] != that1.Files[i] {
			return false
		}
	}
	return true
}
func (this *LanguageSetup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LanguageSetup)
	if !ok {
		that2, ok := that.(LanguageSetup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Active != that1.Active {
		return false
	}
	if this.ProtocBinary != that1.ProtocBinary {
		return false
	}
	return true
}
func (this *Go) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Go)
	if !ok {
		that2, ok := that.(Go)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Setup.Equal(that1.Setup) {
		return false
	}
	return true
}
func (this *Javascript) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Javascript)
	if !ok {
		that2, ok := that.(Javascript)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Setup.Equal(that1.Setup) {
		return false
	}
	return true
}
func (this *Python) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Python)
	if !ok {
		that2, ok := that.(Python)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Setup.Equal(that1.Setup) {
		return false
	}
	return true
}
func (this *Java) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Java)
	if !ok {
		that2, ok := that.(Java)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Setup.Equal(that1.Setup) {
		return false
	}
	return true
}
func (this *CPP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CPP)
	if !ok {
		that2, ok := that.(CPP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Setup.Equal(that1.Setup) {
		return false
	}
	return true
}
func (this *CSharp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CSharp)
	if !ok {
		that2, ok := that.(CSharp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Setup.Equal(that1.Setup) {
		return false
	}
	return true
}
func (this *ObjectiveC) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ObjectiveC)
	if !ok {
		that2, ok := that.(ObjectiveC)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Setup.Equal(that1.Setup) {
		return false
	}
	return true
}
func (this *Ruby) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ruby)
	if !ok {
		that2, ok := that.(Ruby)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Setup.Equal(that1.Setup) {
		return false
	}
	return true
}
func (this *Dart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Dart)
	if !ok {
		that2, ok := that.(Dart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Setup.Equal(that1.Setup) {
		return false
	}
	return true
}
func (this *PHP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PHP)
	if !ok {
		that2, ok := that.(PHP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Setup.Equal(that1.Setup) {
		return false
	}
	return true
}
func (this *PushBee) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PushBee)
	if !ok {
		that2, ok := that.(PushBee)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bee.Equal(that1.Bee) {
		return false
	}
	if !this.Token.Equal(that1.Token) {
		return false
	}
	return true
}
func (this *PushHive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PushHive)
	if !ok {
		that2, ok := that.(PushHive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hive.Equal(that1.Hive) {
		return false
	}
	if !this.Token.Equal(that1.Token) {
		return false
	}
	return true
}
func (this *PushBeeRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PushBeeRes)
	if !ok {
		that2, ok := that.(PushBeeRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *PushHiveRes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PushHiveRes)
	if !ok {
		that2, ok := that.(PushHiveRes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (bee *Bee) GoString() string {
	if bee == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&core.Bee{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", bee.Name)+",\n")
	s = append(s, "PkgName: "+fmt.Sprintf("%#v", bee.PkgName)+",\n")
	s = append(s, "PkgNameCamel: "+fmt.Sprintf("%#v", bee.PkgNameCamel)+",\n")
	s = append(s, "Repo: "+fmt.Sprintf("%#v", bee.Repo)+",\n")
	s = append(s, "Author: "+fmt.Sprintf("%#v", bee.Author)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", bee.Port)+",\n")
	s = append(s, "Public: "+fmt.Sprintf("%#v", bee.Public)+",\n")
	s = append(s, "License: "+fmt.Sprintf("%#v", bee.License)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", bee.Description)+",\n")
	s = append(s, "Keywords: "+fmt.Sprintf("%#v", bee.Keywords)+",\n")
	s = append(s, "Tag: "+fmt.Sprintf("%#v", bee.Tag)+",\n")
	s = append(s, "DevLang: "+fmt.Sprintf("%#v", bee.DevLang)+",\n")
	if bee.Languages != nil {
		s = append(s, "Languages: "+fmt.Sprintf("%#v", bee.Languages)+",\n")
	}
	if bee.ProtoSetup != nil {
		s = append(s, "ProtoSetup: "+fmt.Sprintf("%#v", bee.ProtoSetup)+",\n")
	}
	s = append(s, "IsGateway: "+fmt.Sprintf("%#v", bee.IsGateway)+",\n")
	s = append(s, "Deps: "+fmt.Sprintf("%#v", bee.Deps)+",\n")
	s = append(s, "Cons: "+fmt.Sprintf("%#v", bee.Cons)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Bees) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&core.Bees{")
	if this.Bees != nil {
		s = append(s, "Bees: "+fmt.Sprintf("%#v", this.Bees)+",\n")
	}
	s = append(s, "StatusMessage: "+fmt.Sprintf("%#v", this.StatusMessage)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BeeReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&core.BeeReq{")
	if this.Token != nil {
		s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	}
	s = append(s, "BeeName: "+fmt.Sprintf("%#v", this.BeeName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BeesReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&core.BeesReq{")
	if this.Token != nil {
		s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	}
	s = append(s, "BeeNames: "+fmt.Sprintf("%#v", this.BeeNames)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Dep) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&core.Dep{")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "Dev: "+fmt.Sprintf("%#v", this.Dev)+",\n")
	s = append(s, "Prod: "+fmt.Sprintf("%#v", this.Prod)+",\n")
	s = append(s, "PkgName: "+fmt.Sprintf("%#v", this.PkgName)+",\n")
	s = append(s, "PkgNameCamel: "+fmt.Sprintf("%#v", this.PkgNameCamel)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (hive *Hive) GoString() string {
	if hive == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&core.Hive{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", hive.Name)+",\n")
	s = append(s, "PkgName: "+fmt.Sprintf("%#v", hive.PkgName)+",\n")
	s = append(s, "PkgNameCamel: "+fmt.Sprintf("%#v", hive.PkgNameCamel)+",\n")
	s = append(s, "Repo: "+fmt.Sprintf("%#v", hive.Repo)+",\n")
	s = append(s, "Author: "+fmt.Sprintf("%#v", hive.Author)+",\n")
	s = append(s, "Public: "+fmt.Sprintf("%#v", hive.Public)+",\n")
	keysForDeps := make([]string, 0, len(hive.Deps))
	for k, _ := range hive.Deps {
		keysForDeps = append(keysForDeps, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDeps)
	mapStringForDeps := "map[string]*Dep{"
	for _, k := range keysForDeps {
		mapStringForDeps += fmt.Sprintf("%#v: %#v,", k, hive.Deps[k])
	}
	mapStringForDeps += "}"
	if hive.Deps != nil {
		s = append(s, "Deps: "+mapStringForDeps+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Languages) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&core.Languages{")
	if this.Go != nil {
		s = append(s, "Go: "+fmt.Sprintf("%#v", this.Go)+",\n")
	}
	if this.Javascript != nil {
		s = append(s, "Javascript: "+fmt.Sprintf("%#v", this.Javascript)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProtoSetup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&core.ProtoSetup{")
	s = append(s, "Files: "+fmt.Sprintf("%#v", this.Files)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LanguageSetup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&core.LanguageSetup{")
	s = append(s, "Active: "+fmt.Sprintf("%#v", this.Active)+",\n")
	s = append(s, "ProtocBinary: "+fmt.Sprintf("%#v", this.ProtocBinary)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Go) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&core.Go{")
	if this.Setup != nil {
		s = append(s, "Setup: "+fmt.Sprintf("%#v", this.Setup)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Javascript) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&core.Javascript{")
	if this.Setup != nil {
		s = append(s, "Setup: "+fmt.Sprintf("%#v", this.Setup)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Python) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&core.Python{")
	if this.Setup != nil {
		s = append(s, "Setup: "+fmt.Sprintf("%#v", this.Setup)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Java) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&core.Java{")
	if this.Setup != nil {
		s = append(s, "Setup: "+fmt.Sprintf("%#v", this.Setup)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CPP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&core.CPP{")
	if this.Setup != nil {
		s = append(s, "Setup: "+fmt.Sprintf("%#v", this.Setup)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CSharp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&core.CSharp{")
	if this.Setup != nil {
		s = append(s, "Setup: "+fmt.Sprintf("%#v", this.Setup)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ObjectiveC) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&core.ObjectiveC{")
	if this.Setup != nil {
		s = append(s, "Setup: "+fmt.Sprintf("%#v", this.Setup)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Ruby) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&core.Ruby{")
	if this.Setup != nil {
		s = append(s, "Setup: "+fmt.Sprintf("%#v", this.Setup)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Dart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&core.Dart{")
	if this.Setup != nil {
		s = append(s, "Setup: "+fmt.Sprintf("%#v", this.Setup)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PHP) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&core.PHP{")
	if this.Setup != nil {
		s = append(s, "Setup: "+fmt.Sprintf("%#v", this.Setup)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PushBee) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&core.PushBee{")
	if this.Bee != nil {
		s = append(s, "Bee: "+fmt.Sprintf("%#v", this.Bee)+",\n")
	}
	if this.Token != nil {
		s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PushHive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&core.PushHive{")
	if this.Hive != nil {
		s = append(s, "Hive: "+fmt.Sprintf("%#v", this.Hive)+",\n")
	}
	if this.Token != nil {
		s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PushBeeRes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&core.PushBeeRes{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PushHiveRes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&core.PushHiveRes{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCore(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (bee *Bee) Marshal() (dAtA []byte, err error) {
	size := bee.Size()
	dAtA = make([]byte, size)
	n, err := bee.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (bee *Bee) MarshalTo(dAtA []byte) (int, error) {
	size := bee.Size()
	return bee.MarshalToSizedBuffer(dAtA[:size])
}

func (bee *Bee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(bee.Cons) > 0 {
		for iNdEx := len(bee.Cons) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(bee.Cons[iNdEx])
			copy(dAtA[i:], bee.Cons[iNdEx])
			i = encodeVarintCore(dAtA, i, uint64(len(bee.Cons[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(bee.Deps) > 0 {
		for iNdEx := len(bee.Deps) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(bee.Deps[iNdEx])
			copy(dAtA[i:], bee.Deps[iNdEx])
			i = encodeVarintCore(dAtA, i, uint64(len(bee.Deps[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if bee.IsGateway {
		i--
		if bee.IsGateway {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if bee.ProtoSetup != nil {
		{
			size, err := bee.ProtoSetup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if bee.Languages != nil {
		{
			size, err := bee.Languages.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if bee.DevLang != 0 {
		i = encodeVarintCore(dAtA, i, uint64(bee.DevLang))
		i--
		dAtA[i] = 0x68
	}
	if len(bee.Tag) > 0 {
		i -= len(bee.Tag)
		copy(dAtA[i:], bee.Tag)
		i = encodeVarintCore(dAtA, i, uint64(len(bee.Tag)))
		i--
		dAtA[i] = 0x62
	}
	if len(bee.Keywords) > 0 {
		i -= len(bee.Keywords)
		copy(dAtA[i:], bee.Keywords)
		i = encodeVarintCore(dAtA, i, uint64(len(bee.Keywords)))
		i--
		dAtA[i] = 0x5a
	}
	if len(bee.Description) > 0 {
		i -= len(bee.Description)
		copy(dAtA[i:], bee.Description)
		i = encodeVarintCore(dAtA, i, uint64(len(bee.Description)))
		i--
		dAtA[i] = 0x52
	}
	if len(bee.License) > 0 {
		i -= len(bee.License)
		copy(dAtA[i:], bee.License)
		i = encodeVarintCore(dAtA, i, uint64(len(bee.License)))
		i--
		dAtA[i] = 0x4a
	}
	if bee.Public {
		i--
		if bee.Public {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if bee.Port != 0 {
		i = encodeVarintCore(dAtA, i, uint64(bee.Port))
		i--
		dAtA[i] = 0x38
	}
	if len(bee.Author) > 0 {
		i -= len(bee.Author)
		copy(dAtA[i:], bee.Author)
		i = encodeVarintCore(dAtA, i, uint64(len(bee.Author)))
		i--
		dAtA[i] = 0x2a
	}
	if len(bee.Repo) > 0 {
		i -= len(bee.Repo)
		copy(dAtA[i:], bee.Repo)
		i = encodeVarintCore(dAtA, i, uint64(len(bee.Repo)))
		i--
		dAtA[i] = 0x22
	}
	if len(bee.PkgNameCamel) > 0 {
		i -= len(bee.PkgNameCamel)
		copy(dAtA[i:], bee.PkgNameCamel)
		i = encodeVarintCore(dAtA, i, uint64(len(bee.PkgNameCamel)))
		i--
		dAtA[i] = 0x1a
	}
	if len(bee.PkgName) > 0 {
		i -= len(bee.PkgName)
		copy(dAtA[i:], bee.PkgName)
		i = encodeVarintCore(dAtA, i, uint64(len(bee.PkgName)))
		i--
		dAtA[i] = 0x12
	}
	if len(bee.Name) > 0 {
		i -= len(bee.Name)
		copy(dAtA[i:], bee.Name)
		i = encodeVarintCore(dAtA, i, uint64(len(bee.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatusMessage) > 0 {
		i -= len(m.StatusMessage)
		copy(dAtA[i:], m.StatusMessage)
		i = encodeVarintCore(dAtA, i, uint64(len(m.StatusMessage)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bees) > 0 {
		for iNdEx := len(m.Bees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BeeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BeeName) > 0 {
		i -= len(m.BeeName)
		copy(dAtA[i:], m.BeeName)
		i = encodeVarintCore(dAtA, i, uint64(len(m.BeeName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BeeNames) > 0 {
		for iNdEx := len(m.BeeNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BeeNames[iNdEx])
			copy(dAtA[i:], m.BeeNames[iNdEx])
			i = encodeVarintCore(dAtA, i, uint64(len(m.BeeNames[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Dep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PkgNameCamel) > 0 {
		i -= len(m.PkgNameCamel)
		copy(dAtA[i:], m.PkgNameCamel)
		i = encodeVarintCore(dAtA, i, uint64(len(m.PkgNameCamel)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PkgName) > 0 {
		i -= len(m.PkgName)
		copy(dAtA[i:], m.PkgName)
		i = encodeVarintCore(dAtA, i, uint64(len(m.PkgName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Prod) > 0 {
		i -= len(m.Prod)
		copy(dAtA[i:], m.Prod)
		i = encodeVarintCore(dAtA, i, uint64(len(m.Prod)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Dev) > 0 {
		i -= len(m.Dev)
		copy(dAtA[i:], m.Dev)
		i = encodeVarintCore(dAtA, i, uint64(len(m.Dev)))
		i--
		dAtA[i] = 0x12
	}
	if m.Port != 0 {
		i = encodeVarintCore(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (hive *Hive) Marshal() (dAtA []byte, err error) {
	size := hive.Size()
	dAtA = make([]byte, size)
	n, err := hive.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (hive *Hive) MarshalTo(dAtA []byte) (int, error) {
	size := hive.Size()
	return hive.MarshalToSizedBuffer(dAtA[:size])
}

func (hive *Hive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(hive.Deps) > 0 {
		for k := range hive.Deps {
			v := hive.Deps[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCore(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCore(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCore(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if hive.Public {
		i--
		if hive.Public {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(hive.Author) > 0 {
		i -= len(hive.Author)
		copy(dAtA[i:], hive.Author)
		i = encodeVarintCore(dAtA, i, uint64(len(hive.Author)))
		i--
		dAtA[i] = 0x2a
	}
	if len(hive.Repo) > 0 {
		i -= len(hive.Repo)
		copy(dAtA[i:], hive.Repo)
		i = encodeVarintCore(dAtA, i, uint64(len(hive.Repo)))
		i--
		dAtA[i] = 0x22
	}
	if len(hive.PkgNameCamel) > 0 {
		i -= len(hive.PkgNameCamel)
		copy(dAtA[i:], hive.PkgNameCamel)
		i = encodeVarintCore(dAtA, i, uint64(len(hive.PkgNameCamel)))
		i--
		dAtA[i] = 0x1a
	}
	if len(hive.PkgName) > 0 {
		i -= len(hive.PkgName)
		copy(dAtA[i:], hive.PkgName)
		i = encodeVarintCore(dAtA, i, uint64(len(hive.PkgName)))
		i--
		dAtA[i] = 0x12
	}
	if len(hive.Name) > 0 {
		i -= len(hive.Name)
		copy(dAtA[i:], hive.Name)
		i = encodeVarintCore(dAtA, i, uint64(len(hive.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Languages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Languages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Languages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Javascript != nil {
		{
			size, err := m.Javascript.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Go != nil {
		{
			size, err := m.Go.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoSetup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoSetup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoSetup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Files[iNdEx])
			copy(dAtA[i:], m.Files[iNdEx])
			i = encodeVarintCore(dAtA, i, uint64(len(m.Files[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *LanguageSetup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LanguageSetup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LanguageSetup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProtocBinary) > 0 {
		i -= len(m.ProtocBinary)
		copy(dAtA[i:], m.ProtocBinary)
		i = encodeVarintCore(dAtA, i, uint64(len(m.ProtocBinary)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Go) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Go) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Go) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Setup != nil {
		{
			size, err := m.Setup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Javascript) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Javascript) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Javascript) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Setup != nil {
		{
			size, err := m.Setup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Python) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Python) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Python) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Setup != nil {
		{
			size, err := m.Setup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Java) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Java) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Java) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Setup != nil {
		{
			size, err := m.Setup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CPP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CPP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Setup != nil {
		{
			size, err := m.Setup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CSharp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSharp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CSharp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Setup != nil {
		{
			size, err := m.Setup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ObjectiveC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectiveC) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectiveC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Setup != nil {
		{
			size, err := m.Setup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Ruby) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ruby) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ruby) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Setup != nil {
		{
			size, err := m.Setup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Dart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Setup != nil {
		{
			size, err := m.Setup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PHP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PHP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PHP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Setup != nil {
		{
			size, err := m.Setup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushBee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushBee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushBee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Bee != nil {
		{
			size, err := m.Bee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushHive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushHive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushHive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Token != nil {
		{
			size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Hive != nil {
		{
			size, err := m.Hive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCore(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushBeeRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushBeeRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushBeeRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCore(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushHiveRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushHiveRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushHiveRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCore(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCore(dAtA []byte, offset int, v uint64) int {
	offset -= sovCore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (bee *Bee) Size() (n int) {
	if bee == nil {
		return 0
	}
	var l int
	_ = l
	l = len(bee.Name)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(bee.PkgName)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(bee.PkgNameCamel)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(bee.Repo)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(bee.Author)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	if bee.Port != 0 {
		n += 1 + sovCore(uint64(bee.Port))
	}
	if bee.Public {
		n += 2
	}
	l = len(bee.License)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(bee.Description)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(bee.Keywords)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(bee.Tag)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	if bee.DevLang != 0 {
		n += 1 + sovCore(uint64(bee.DevLang))
	}
	if bee.Languages != nil {
		l = bee.Languages.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	if bee.ProtoSetup != nil {
		l = bee.ProtoSetup.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	if bee.IsGateway {
		n += 3
	}
	if len(bee.Deps) > 0 {
		for _, s := range bee.Deps {
			l = len(s)
			n += 2 + l + sovCore(uint64(l))
		}
	}
	if len(bee.Cons) > 0 {
		for _, s := range bee.Cons {
			l = len(s)
			n += 2 + l + sovCore(uint64(l))
		}
	}
	return n
}

func (m *Bees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bees) > 0 {
		for _, e := range m.Bees {
			l = e.Size()
			n += 1 + l + sovCore(uint64(l))
		}
	}
	l = len(m.StatusMessage)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	return n
}

func (m *BeeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.BeeName)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	return n
}

func (m *BeesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	if len(m.BeeNames) > 0 {
		for _, s := range m.BeeNames {
			l = len(s)
			n += 1 + l + sovCore(uint64(l))
		}
	}
	return n
}

func (m *Dep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Port != 0 {
		n += 1 + sovCore(uint64(m.Port))
	}
	l = len(m.Dev)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.Prod)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.PkgName)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.PkgNameCamel)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	return n
}

func (hive *Hive) Size() (n int) {
	if hive == nil {
		return 0
	}
	var l int
	_ = l
	l = len(hive.Name)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(hive.PkgName)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(hive.PkgNameCamel)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(hive.Repo)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(hive.Author)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	if hive.Public {
		n += 2
	}
	if len(hive.Deps) > 0 {
		for k, v := range hive.Deps {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCore(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCore(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCore(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Languages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Go != nil {
		l = m.Go.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	if m.Javascript != nil {
		l = m.Javascript.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	return n
}

func (m *ProtoSetup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Files) > 0 {
		for _, s := range m.Files {
			l = len(s)
			n += 1 + l + sovCore(uint64(l))
		}
	}
	return n
}

func (m *LanguageSetup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Active {
		n += 2
	}
	l = len(m.ProtocBinary)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	return n
}

func (m *Go) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Setup != nil {
		l = m.Setup.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	return n
}

func (m *Javascript) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Setup != nil {
		l = m.Setup.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	return n
}

func (m *Python) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Setup != nil {
		l = m.Setup.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	return n
}

func (m *Java) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Setup != nil {
		l = m.Setup.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	return n
}

func (m *CPP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Setup != nil {
		l = m.Setup.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	return n
}

func (m *CSharp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Setup != nil {
		l = m.Setup.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	return n
}

func (m *ObjectiveC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Setup != nil {
		l = m.Setup.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	return n
}

func (m *Ruby) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Setup != nil {
		l = m.Setup.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	return n
}

func (m *Dart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Setup != nil {
		l = m.Setup.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	return n
}

func (m *PHP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Setup != nil {
		l = m.Setup.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	return n
}

func (m *PushBee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bee != nil {
		l = m.Bee.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	return n
}

func (m *PushHive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hive != nil {
		l = m.Hive.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	return n
}

func (m *PushBeeRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	return n
}

func (m *PushHiveRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	return n
}

func sovCore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCore(x uint64) (n int) {
	return sovCore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (bee *Bee) String() string {
	if bee == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Bee{`,
		`Name:` + fmt.Sprintf("%v", bee.Name) + `,`,
		`PkgName:` + fmt.Sprintf("%v", bee.PkgName) + `,`,
		`PkgNameCamel:` + fmt.Sprintf("%v", bee.PkgNameCamel) + `,`,
		`Repo:` + fmt.Sprintf("%v", bee.Repo) + `,`,
		`Author:` + fmt.Sprintf("%v", bee.Author) + `,`,
		`Port:` + fmt.Sprintf("%v", bee.Port) + `,`,
		`Public:` + fmt.Sprintf("%v", bee.Public) + `,`,
		`License:` + fmt.Sprintf("%v", bee.License) + `,`,
		`Description:` + fmt.Sprintf("%v", bee.Description) + `,`,
		`Keywords:` + fmt.Sprintf("%v", bee.Keywords) + `,`,
		`Tag:` + fmt.Sprintf("%v", bee.Tag) + `,`,
		`DevLang:` + fmt.Sprintf("%v", bee.DevLang) + `,`,
		`Languages:` + strings.Replace(bee.Languages.String(), "Languages", "Languages", 1) + `,`,
		`ProtoSetup:` + strings.Replace(bee.ProtoSetup.String(), "ProtoSetup", "ProtoSetup", 1) + `,`,
		`IsGateway:` + fmt.Sprintf("%v", bee.IsGateway) + `,`,
		`Deps:` + fmt.Sprintf("%v", bee.Deps) + `,`,
		`Cons:` + fmt.Sprintf("%v", bee.Cons) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Bees) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBees := "[]*Bee{"
	for _, f := range this.Bees {
		repeatedStringForBees += strings.Replace(f.String(), "Bee", "Bee", 1) + ","
	}
	repeatedStringForBees += "}"
	s := strings.Join([]string{`&Bees{`,
		`Bees:` + repeatedStringForBees + `,`,
		`StatusMessage:` + fmt.Sprintf("%v", this.StatusMessage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BeeReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BeeReq{`,
		`Token:` + strings.Replace(fmt.Sprintf("%v", this.Token), "Token", "user.Token", 1) + `,`,
		`BeeName:` + fmt.Sprintf("%v", this.BeeName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BeesReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BeesReq{`,
		`Token:` + strings.Replace(fmt.Sprintf("%v", this.Token), "Token", "user.Token", 1) + `,`,
		`BeeNames:` + fmt.Sprintf("%v", this.BeeNames) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Dep) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Dep{`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Dev:` + fmt.Sprintf("%v", this.Dev) + `,`,
		`Prod:` + fmt.Sprintf("%v", this.Prod) + `,`,
		`PkgName:` + fmt.Sprintf("%v", this.PkgName) + `,`,
		`PkgNameCamel:` + fmt.Sprintf("%v", this.PkgNameCamel) + `,`,
		`}`,
	}, "")
	return s
}
func (hive *Hive) String() string {
	if hive == nil {
		return "nil"
	}
	keysForDeps := make([]string, 0, len(hive.Deps))
	for k, _ := range hive.Deps {
		keysForDeps = append(keysForDeps, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDeps)
	mapStringForDeps := "map[string]*Dep{"
	for _, k := range keysForDeps {
		mapStringForDeps += fmt.Sprintf("%v: %v,", k, hive.Deps[k])
	}
	mapStringForDeps += "}"
	s := strings.Join([]string{`&Hive{`,
		`Name:` + fmt.Sprintf("%v", hive.Name) + `,`,
		`PkgName:` + fmt.Sprintf("%v", hive.PkgName) + `,`,
		`PkgNameCamel:` + fmt.Sprintf("%v", hive.PkgNameCamel) + `,`,
		`Repo:` + fmt.Sprintf("%v", hive.Repo) + `,`,
		`Author:` + fmt.Sprintf("%v", hive.Author) + `,`,
		`Public:` + fmt.Sprintf("%v", hive.Public) + `,`,
		`Deps:` + mapStringForDeps + `,`,
		`}`,
	}, "")
	return s
}
func (this *Languages) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Languages{`,
		`Go:` + strings.Replace(this.Go.String(), "Go", "Go", 1) + `,`,
		`Javascript:` + strings.Replace(this.Javascript.String(), "Javascript", "Javascript", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProtoSetup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProtoSetup{`,
		`Files:` + fmt.Sprintf("%v", this.Files) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LanguageSetup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LanguageSetup{`,
		`Active:` + fmt.Sprintf("%v", this.Active) + `,`,
		`ProtocBinary:` + fmt.Sprintf("%v", this.ProtocBinary) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Go) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Go{`,
		`Setup:` + strings.Replace(this.Setup.String(), "LanguageSetup", "LanguageSetup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Javascript) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Javascript{`,
		`Setup:` + strings.Replace(this.Setup.String(), "LanguageSetup", "LanguageSetup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Python) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Python{`,
		`Setup:` + strings.Replace(this.Setup.String(), "LanguageSetup", "LanguageSetup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Java) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Java{`,
		`Setup:` + strings.Replace(this.Setup.String(), "LanguageSetup", "LanguageSetup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CPP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CPP{`,
		`Setup:` + strings.Replace(this.Setup.String(), "LanguageSetup", "LanguageSetup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CSharp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CSharp{`,
		`Setup:` + strings.Replace(this.Setup.String(), "LanguageSetup", "LanguageSetup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ObjectiveC) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObjectiveC{`,
		`Setup:` + strings.Replace(this.Setup.String(), "LanguageSetup", "LanguageSetup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ruby) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ruby{`,
		`Setup:` + strings.Replace(this.Setup.String(), "LanguageSetup", "LanguageSetup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Dart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Dart{`,
		`Setup:` + strings.Replace(this.Setup.String(), "LanguageSetup", "LanguageSetup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PHP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PHP{`,
		`Setup:` + strings.Replace(this.Setup.String(), "LanguageSetup", "LanguageSetup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushBee) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushBee{`,
		`Bee:` + strings.Replace(this.Bee.String(), "Bee", "Bee", 1) + `,`,
		`Token:` + strings.Replace(fmt.Sprintf("%v", this.Token), "Token", "user.Token", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushHive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushHive{`,
		`Hive:` + strings.Replace(this.Hive.String(), "Hive", "Hive", 1) + `,`,
		`Token:` + strings.Replace(fmt.Sprintf("%v", this.Token), "Token", "user.Token", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushBeeRes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushBeeRes{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushHiveRes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushHiveRes{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCore(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (bee *Bee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			bee.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			bee.PkgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkgNameCamel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			bee.PkgNameCamel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			bee.Repo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			bee.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			bee.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				bee.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Public", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			bee.Public = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			bee.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			bee.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keywords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			bee.Keywords = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			bee.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevLang", wireType)
			}
			bee.DevLang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				bee.DevLang |= DevLang(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Languages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if bee.Languages == nil {
				bee.Languages = &Languages{}
			}
			if err := bee.Languages.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtoSetup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if bee.ProtoSetup == nil {
				bee.ProtoSetup = &ProtoSetup{}
			}
			if err := bee.ProtoSetup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGateway", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			bee.IsGateway = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			bee.Deps = append(bee.Deps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cons", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			bee.Cons = append(bee.Cons, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bees = append(m.Bees, &Bee{})
			if err := m.Bees[len(m.Bees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &user.Token{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &user.Token{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeeNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeeNames = append(m.BeeNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dev", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dev = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PkgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkgNameCamel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PkgNameCamel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (hive *Hive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			hive.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			hive.PkgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkgNameCamel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			hive.PkgNameCamel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			hive.Repo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			hive.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Public", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hive.Public = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if hive.Deps == nil {
				hive.Deps = make(map[string]*Dep)
			}
			var mapkey string
			var mapvalue *Dep
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCore
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCore
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCore
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCore
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCore
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Dep{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCore(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCore
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			hive.Deps[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Languages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Languages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Languages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Go", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Go == nil {
				m.Go = &Go{}
			}
			if err := m.Go.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Javascript", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Javascript == nil {
				m.Javascript = &Javascript{}
			}
			if err := m.Javascript.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoSetup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoSetup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoSetup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LanguageSetup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LanguageSetup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LanguageSetup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocBinary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocBinary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Go) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Go: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Go: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Setup == nil {
				m.Setup = &LanguageSetup{}
			}
			if err := m.Setup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Javascript) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Javascript: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Javascript: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Setup == nil {
				m.Setup = &LanguageSetup{}
			}
			if err := m.Setup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Python) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Python: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Python: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Setup == nil {
				m.Setup = &LanguageSetup{}
			}
			if err := m.Setup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Java) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Java: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Java: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Setup == nil {
				m.Setup = &LanguageSetup{}
			}
			if err := m.Setup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Setup == nil {
				m.Setup = &LanguageSetup{}
			}
			if err := m.Setup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSharp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSharp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSharp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Setup == nil {
				m.Setup = &LanguageSetup{}
			}
			if err := m.Setup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectiveC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectiveC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectiveC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Setup == nil {
				m.Setup = &LanguageSetup{}
			}
			if err := m.Setup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ruby) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ruby: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ruby: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Setup == nil {
				m.Setup = &LanguageSetup{}
			}
			if err := m.Setup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Setup == nil {
				m.Setup = &LanguageSetup{}
			}
			if err := m.Setup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PHP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PHP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PHP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Setup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Setup == nil {
				m.Setup = &LanguageSetup{}
			}
			if err := m.Setup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushBee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushBee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushBee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bee == nil {
				m.Bee = &Bee{}
			}
			if err := m.Bee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &user.Token{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushHive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushHive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushHive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hive == nil {
				m.Hive = &Hive{}
			}
			if err := m.Hive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &user.Token{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushBeeRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushBeeRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushBeeRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushHiveRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushHiveRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushHiveRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCore = fmt.Errorf("proto: unexpected end of group")
)
